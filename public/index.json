[{
    "title": "The Truth Is Out There",
    "date": "",
    "description": "",
    "body": "  I’m a huge X-Files fan. I also love working with text data. I’ve had an idea floating around for a while to do a tidy text analysis on X-Files episode scripts. The X-Files has been around long enough that there are tons of fandom sites, and you can easily find transcripts of the original 9 seasons.First, I wanted to get some basic information about the episodes, so that’s what this post will focus on. My first thought was to go to Wikipedia. There is a page with tables for each season and I can use that as the base URL for scraping.\nPackages used in this first episode:\n Tidyverse, obviously. This is always the first package I load. Janitor, which has a couple of functions I like to use, especially clean_names() to clean and remove special characters from column names in new datasets. Rvest, which can be used to scrape data from websites. Googlesheets4, which is an update of the original googlesheets package. I can use this to store my data because I have more than one computer I use on a regular basis.\n Extrafont (pretty self-explanatory). Ggiraph for graph animation.  Now, on to the X-Files.\nwiki \u0026lt;- \u0026quot;https://en.wikipedia.org/wiki/List_of_The_X-Files_episodes\u0026quot; To find out what selector you need to look at the tables of interest, you can use a Chrome extension called SelectorGadget, or you can just right click on the specific spot on a website and choose “inspect” in the dropdown menu that comes up - which is what I usually do.\nIn this case it’s pretty easy, the html nodes I’m interested in are simply “table” class. At first glance, it looks like tables 2 through 14 are “wiki episode table”. That’s one more than I would expect, because there are nine original seasons, and then two follow-up seasons that came out more recently (10-11). However, there are also two X-Files movies, which appear to have separate tables. I don’t want to deal with those right now really, so I will leave them out when I scrape the tables.\nwiki %\u0026gt;% read_html() %\u0026gt;% html_nodes(., \u0026quot;table\u0026quot;) ## {xml_nodeset (19)} ## [1] \u0026lt;table class=\u0026quot;wikitable plainrowheaders\u0026quot; style=\u0026quot;text-align:center\u0026quot;\u0026gt;\u0026lt;tbod ... ## [2] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [3] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [4] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [5] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [6] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [7] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [8] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [9] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [10] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [11] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [12] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [13] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [14] \u0026lt;table class=\u0026quot;wikitable plainrowheaders wikiepisodetable\u0026quot; style=\u0026quot;width:1 ... ## [15] \u0026lt;table role=\u0026quot;presentation\u0026quot; class=\u0026quot;mbox-small plainlinks sistersitebox\u0026quot; s ... ## [16] \u0026lt;table class=\u0026quot;nowraplinks hlist mw-collapsible autocollapse navbox-inner ... ## [17] \u0026lt;table class=\u0026quot;nowraplinks navbox-subgroup\u0026quot; style=\u0026quot;border-spacing:0\u0026quot;\u0026gt;\u0026lt;tbo ... ## [18] \u0026lt;table class=\u0026quot;nowraplinks navbox-subgroup\u0026quot; style=\u0026quot;border-spacing:0\u0026quot;\u0026gt;\u0026lt;tbo ... ## [19] \u0026lt;table class=\u0026quot;nowraplinks hlist mw-collapsible autocollapse navbox-inner ... So before we get the tables, I’m just going to select the nodes I actually want to collect, then use html_table to gather them all in table format.\ntables \u0026lt;- wiki %\u0026gt;% read_html() %\u0026gt;% html_nodes(., \u0026quot;table\u0026quot;) %\u0026gt;% .[c(2:6, 8:11, 13:14)] %\u0026gt;% html_table(fill = TRUE) I won’t show all the tables just for the sake of space, but here is the first one. It looks like the “prod code” column is going to cause issues when I try and map them to one dataframe, because in some cases there are hyperlinks which results in inconsistent column names. (Hint: the table is interactive so you can flip over to the other columns or down to the next page).\ntables[[1]] {\"columns\":[{\"label\":[\"No.overall\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"No. inseason\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Title\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Directed by\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Written by\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Original air date\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Prod.code [40]\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"U.S. viewers(millions)\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"\\\"Pilot\\\"‡\",\"4\":\"Robert Mandel\",\"5\":\"Chris Carter\",\"6\":\"September 10, 1993 (1993-09-10)\",\"7\":\"1X79\",\"8\":\"12.0[41]\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"\\\"Deep Throat\\\"‡\",\"4\":\"Daniel Sackheim\",\"5\":\"Chris Carter\",\"6\":\"September 17, 1993 (1993-09-17)\",\"7\":\"1X01\",\"8\":\"11.1[42]\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"\\\"Squeeze\\\"\",\"4\":\"Harry Longstreet\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"September 24, 1993 (1993-09-24)\",\"7\":\"1X02\",\"8\":\"11.1[43]\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"\\\"Conduit\\\"\",\"4\":\"Daniel Sackheim\",\"5\":\"Alex Gansa \u0026 Howard Gordon\",\"6\":\"October 1, 1993 (1993-10-01)\",\"7\":\"1X03\",\"8\":\"9.2[44]\"},{\"1\":\"5\",\"2\":\"5\",\"3\":\"\\\"The Jersey Devil\\\"\",\"4\":\"Joe Napolitano\",\"5\":\"Chris Carter\",\"6\":\"October 8, 1993 (1993-10-08)\",\"7\":\"1X04\",\"8\":\"10.4[45]\"},{\"1\":\"6\",\"2\":\"6\",\"3\":\"\\\"Shadows\\\"\",\"4\":\"Michael Katleman\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"October 22, 1993 (1993-10-22)\",\"7\":\"1X05\",\"8\":\"8.8[46]\"},{\"1\":\"7\",\"2\":\"7\",\"3\":\"\\\"Ghost in the Machine\\\"\",\"4\":\"Jerrold Freedman\",\"5\":\"Alex Gansa \u0026 Howard Gordon\",\"6\":\"October 29, 1993 (1993-10-29)\",\"7\":\"1X06\",\"8\":\"9.5[47]\"},{\"1\":\"8\",\"2\":\"8\",\"3\":\"\\\"Ice\\\"\",\"4\":\"David Nutter\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"November 5, 1993 (1993-11-05)\",\"7\":\"1X07\",\"8\":\"10.0[48]\"},{\"1\":\"9\",\"2\":\"9\",\"3\":\"\\\"Space\\\"\",\"4\":\"William Graham\",\"5\":\"Chris Carter\",\"6\":\"November 12, 1993 (1993-11-12)\",\"7\":\"1X08\",\"8\":\"10.7[49]\"},{\"1\":\"10\",\"2\":\"10\",\"3\":\"\\\"Fallen Angel\\\"‡\",\"4\":\"Larry Shaw\",\"5\":\"Howard Gordon \u0026 Alex Gansa\",\"6\":\"November 19, 1993 (1993-11-19)\",\"7\":\"1X09\",\"8\":\"8.8[50]\"},{\"1\":\"11\",\"2\":\"11\",\"3\":\"\\\"Eve\\\"\",\"4\":\"Fred Gerber\",\"5\":\"Kenneth Biller \u0026 Chris Brancato\",\"6\":\"December 10, 1993 (1993-12-10)\",\"7\":\"1X10\",\"8\":\"10.4[51]\"},{\"1\":\"12\",\"2\":\"12\",\"3\":\"\\\"Fire\\\"\",\"4\":\"Larry Shaw\",\"5\":\"Chris Carter\",\"6\":\"December 17, 1993 (1993-12-17)\",\"7\":\"1X11\",\"8\":\"11.1[52]\"},{\"1\":\"13\",\"2\":\"13\",\"3\":\"\\\"Beyond the Sea\\\"\",\"4\":\"David Nutter\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"January 7, 1994 (1994-01-07)\",\"7\":\"1X12\",\"8\":\"10.8[53]\"},{\"1\":\"14\",\"2\":\"14\",\"3\":\"\\\"Gender Bender\\\"\",\"4\":\"Rob Bowman\",\"5\":\"Larry Barber \u0026 Paul Barber\",\"6\":\"January 21, 1994 (1994-01-21)\",\"7\":\"1X13\",\"8\":\"11.1[54]\"},{\"1\":\"15\",\"2\":\"15\",\"3\":\"\\\"Lazarus\\\"\",\"4\":\"David Nutter\",\"5\":\"Alex Gansa \u0026 Howard Gordon\",\"6\":\"February 4, 1994 (1994-02-04)\",\"7\":\"1X14\",\"8\":\"12.1[55]\"},{\"1\":\"16\",\"2\":\"16\",\"3\":\"\\\"Young at Heart\\\"\",\"4\":\"Michael Lange\",\"5\":\"Scott Kaufer and Chris Carter\",\"6\":\"February 11, 1994 (1994-02-11)\",\"7\":\"1X15\",\"8\":\"11.5[56]\"},{\"1\":\"17\",\"2\":\"17\",\"3\":\"\\\"E.B.E.\\\"‡\",\"4\":\"William Graham\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"February 18, 1994 (1994-02-18)\",\"7\":\"1X16\",\"8\":\"N/A\"},{\"1\":\"18\",\"2\":\"18\",\"3\":\"\\\"Miracle Man\\\"\",\"4\":\"Michael Lange\",\"5\":\"Chris Carter \u0026 Howard Gordon\",\"6\":\"March 18, 1994 (1994-03-18)\",\"7\":\"1X17\",\"8\":\"11.6[57]\"},{\"1\":\"19\",\"2\":\"19\",\"3\":\"\\\"Shapes\\\"\",\"4\":\"David Nutter\",\"5\":\"Marilyn Osborn\",\"6\":\"April 1, 1994 (1994-04-01)\",\"7\":\"1X18\",\"8\":\"11.5[58]\"},{\"1\":\"20\",\"2\":\"20\",\"3\":\"\\\"Darkness Falls\\\"\",\"4\":\"Joe Napolitano\",\"5\":\"Chris Carter\",\"6\":\"April 15, 1994 (1994-04-15)\",\"7\":\"1X19\",\"8\":\"12.5[59]\"},{\"1\":\"21\",\"2\":\"21\",\"3\":\"\\\"Tooms\\\"\",\"4\":\"David Nutter\",\"5\":\"Glen Morgan \u0026 James Wong\",\"6\":\"April 22, 1994 (1994-04-22)\",\"7\":\"1X20\",\"8\":\"13.4[60]\"},{\"1\":\"22\",\"2\":\"22\",\"3\":\"\\\"Born Again\\\"\",\"4\":\"Jerrold Freedman\",\"5\":\"Howard Gordon \u0026 Alex Gansa\",\"6\":\"April 29, 1994 (1994-04-29)\",\"7\":\"1X21\",\"8\":\"13.7[61]\"},{\"1\":\"23\",\"2\":\"23\",\"3\":\"\\\"Roland\\\"\",\"4\":\"David Nutter\",\"5\":\"Chris Ruppenthal\",\"6\":\"May 6, 1994 (1994-05-06)\",\"7\":\"1X22\",\"8\":\"12.5[62]\"},{\"1\":\"24\",\"2\":\"24\",\"3\":\"\\\"The Erlenmeyer Flask\\\"‡\",\"4\":\"R. W. Goodwin\",\"5\":\"Chris Carter\",\"6\":\"May 13, 1994 (1994-05-13)\",\"7\":\"1X23\",\"8\":\"14.0[63]\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}   I’m going to add names to this list of dataframes before I clean the column names.\nnames(tables) \u0026lt;- rep(paste0(\u0026quot;Season \u0026quot;, 1:11)) Now to get the column names. They are all the same aside from the issue I mentioned earlier.\nnames(tables[[1]] %\u0026gt;% clean_names()) ## [1] \u0026quot;no_overall\u0026quot; \u0026quot;no_inseason\u0026quot; \u0026quot;title\u0026quot; ## [4] \u0026quot;directed_by\u0026quot; \u0026quot;written_by\u0026quot; \u0026quot;original_air_date\u0026quot; ## [7] \u0026quot;prod_code_40\u0026quot; \u0026quot;u_s_viewers_millions\u0026quot; ",
    "ref": "/blog/2021-01-03-the-truth-is-out-there/"
  },{
    "title": "Test Post 3",
    "date": "",
    "description": "",
    "body": "  A Test\ndata(cars) head(cars) {\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"speed\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"dist\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"4\",\"2\":\"2\",\"_rn_\":\"1\"},{\"1\":\"4\",\"2\":\"10\",\"_rn_\":\"2\"},{\"1\":\"7\",\"2\":\"4\",\"_rn_\":\"3\"},{\"1\":\"7\",\"2\":\"22\",\"_rn_\":\"4\"},{\"1\":\"8\",\"2\":\"16\",\"_rn_\":\"5\"},{\"1\":\"9\",\"2\":\"10\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}   ",
    "ref": "/blog/2021-01-03-test-post-3/"
  },{
    "title": "Rich Content",
    "date": "",
    "description": "A brief description of Hugo Shortcodes",
    "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n */}} --  YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ",
    "ref": "/blog/rich-content/"
  },{
    "title": "Placeholder Text",
    "date": "",
    "description": "Lorem Ipsum Dolor Si Amet",
    "body": "Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n",
    "ref": "/blog/placeholder-text/"
  },{
    "title": "Emoji Support",
    "date": "",
    "description": "Guide to emoji usage in Hugo",
    "body": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }",
    "ref": "/blog/emoji-support/"
  },{
    "title": "About",
    "date": "",
    "description": "Hugo, the world’s fastest framework for building websites",
    "body": "Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n",
    "ref": "/about/"
  },{
    "title": "Katie Press",
    "date": "",
    "description": "",
    "body": " R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ",
    "ref": "/blog/2015-07-23-r-rmarkdown/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
